{"version":3,"sources":["DrawerView.tsx"],"names":["React","View","Dimensions","StyleSheet","I18nManager","Platform","BackHandler","ScreenContainer","GestureHandlerRootView","DrawerActions","useTheme","DrawerGestureContext","SafeAreaProviderCompat","ResourceSavingScene","DrawerContent","Drawer","DrawerPositionContext","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","loaded","setLoaded","useState","index","drawerWidth","setDrawerWidth","get","drawerGestureRef","useRef","colors","isDrawerOpen","Boolean","history","find","it","type","handleDrawerOpen","useCallback","dispatch","openDrawer","target","key","handleDrawerClose","closeDrawer","useEffect","emit","subscription","addEventListener","remove","updateWidth","window","removeEventListener","includes","renderNavigationView","progress","renderContent","styles","content","routes","map","route","descriptor","unmountOnBlur","options","isFocused","absoluteFill","opacity","render","activeKey","gestureEnabled","ref","current","backgroundColor","background","card","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() =>\n    getDefaultDrawerWidth(Dimensions.get('window'))\n  );\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = Boolean(state.history.find(it => it.type === 'drawer'));\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <Drawer\n            open={isDrawerOpen}\n            gestureEnabled={gestureEnabled}\n            onOpen={handleDrawerOpen}\n            onClose={handleDrawerClose}\n            onGestureRef={ref => {\n              // @ts-ignore\n              drawerGestureRef.current = ref;\n            }}\n            gestureHandlerProps={gestureHandlerProps}\n            drawerType={drawerType}\n            drawerPosition={drawerPosition}\n            sceneContainerStyle={[\n              { backgroundColor: colors.background },\n              sceneContainerStyle,\n            ]}\n            drawerStyle={[\n              { width: drawerWidth, backgroundColor: colors.card },\n              drawerStyle,\n            ]}\n            overlayStyle={{ backgroundColor: overlayColor }}\n            swipeEdgeWidth={edgeWidth}\n            swipeDistanceThreshold={minSwipeDistance}\n            hideStatusBar={hideStatusBar}\n            statusBarAnimation={statusBarAnimation}\n            renderDrawerContent={renderNavigationView}\n            renderSceneContent={renderContent}\n            keyboardDismissMode={keyboardDismissMode}\n            drawerPostion={drawerPosition}\n          />\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}