{"version":3,"sources":["DrawerItem.tsx"],"names":["React","Text","View","StyleSheet","useTheme","Color","TouchableItem","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","style","onPress","rest","borderRadius","flatten","color","backgroundColor","iconNode","size","styles","container","wrapper","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text)\n      .alpha(0.68)\n      .rgb()\n      .string(),\n    activeBackgroundColor = Color(activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]}