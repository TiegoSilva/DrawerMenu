{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["React","Platform","StyleSheet","View","Screen","screensEnabled","FAR_FAR_AWAY","ResourceSavingScene","Component","render","props","isVisible","rest","children","style","styles","container","OS","attached","detached","create","flex","overflow","top"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,IAA/B,QAA2C,cAA3C,C,CACA;;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,sBAAvC;AAQA,MAAMC,YAAY,GAAG,IAArB,C,CAA2B;;AAE3B,eAAe,MAAMC,mBAAN,SAAkCP,KAAK,CAACQ,SAAxC,CAAyD;AACtEC,EAAAA,MAAM,GAAG;AACP,QAAIJ,cAAJ,aAAIA,cAAJ,uBAAIA,cAAc,EAAlB,EAAwB;AACtB,0BAA+B,KAAKK,KAApC;AAAA,YAAM;AAAEC,QAAAA;AAAF,OAAN;AAAA,YAAsBC,IAAtB,wDADsB,CAGtB;;;AACA,aAAO,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAED,SAAS,GAAG,CAAH,GAAO;AAAhC,SAAuCC,IAAvC,EAAP;AACD;;AACD,yBAAgD,KAAKF,KAArD;AAAA,UAAM;AAAEC,MAAAA,SAAF;AAAaE,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,KAAN;AAAA,UAAuCF,IAAvC;;AAEA,WACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CAACG,MAAM,CAACC,SAAR,EAAmBF,KAAnB,CADT;AAEE,MAAA,WAAW,EAAE,KAFf;AAGE,MAAA,qBAAqB,EACnB;AACA;AACAb,MAAAA,QAAQ,CAACgB,EAAT,KAAgB,KAAhB,GAAwB,CAACN,SAAzB,GAAqC,IANzC;AAQE,MAAA,aAAa,EAAEA,SAAS,GAAG,MAAH,GAAY;AARtC,OASMC,IATN,GAWE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAED,SAAS,GAAGI,MAAM,CAACG,QAAV,GAAqBH,MAAM,CAACI;AAAlD,OACGN,QADH,CAXF,CADF;AAiBD;;AA3BqE;AA8BxE,MAAME,MAAM,GAAGb,UAAU,CAACkB,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BJ,EAAAA,QAAQ,EAAE;AACRG,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EAAE,CADE;AAERE,IAAAA,GAAG,EAAEjB;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    if (screensEnabled?.()) {\n      const { isVisible, ...rest } = this.props;\n\n      // @ts-ignore\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[styles.container, style]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]}