{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","cond","greaterThan","Animated","PROGRESS_EPSILON","Overlay","React","forwardRef","ref","progress","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","styles","overlay","StyleSheet","create","absoluteFillObject","backgroundColor","Platform","select","web","WebkitTapHighlightColor","default"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA;AAArB,IAAqCC,8BAA3C;AAEA,MAAMC,gBAAgB,GAAG,IAAzB;AAMA,MAAMC,OAAO,GAAGC,KAAK,CAACC,UAAN,CAAiB,SAASF,OAAT,OAE/BG,GAF+B,EAG/B;AAAA,MAFA;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAEA;AAAA,MAFsBC,KAEtB;;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEb,WAAW,CAACS,QAAD,EAAW;AAC7BK,MAAAA,UAAU,EAAE,CAACV,gBAAD,EAAmB,CAAnB,CADiB;AAE7BW,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFgB,KAAX,CADA;AAKpB;AACA;AACA;AACAC,IAAAA,MAAM,EAAEf,IAAI,CAACC,WAAW,CAACO,QAAD,EAAWL,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AARQ,GAAtB;AAWA,SACE,oBAAC,8BAAD,CAAU,IAAV,eACMO,KADN;AAEE,IAAA,GAAG,EAAEH,GAFP;AAGE,IAAA,KAAK,EAAE,CAACS,MAAM,CAACC,OAAR,EAAiBN,aAAjB,EAAgCF,KAAhC;AAHT,KADF;AAOD,CAtBe,CAAhB;;AAwBA,MAAMO,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,OAAO,oBACFC,wBAAWE,kBADT;AAELC,IAAAA,eAAe,EAAE;AAFZ,KAGFC,sBAASC,MAAT,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AACH;AACAC,MAAAA,uBAAuB,EAAE;AAFtB,KADY;AAKjBC,IAAAA,OAAO,EAAE;AALQ,GAAhB,CAHE;AADwB,CAAlB,CAAf;;eAcetB,O","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst { interpolate, cond, greaterThan } = Animated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, animatedStyle, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    ...Platform.select({\n      web: {\n        // Disable touch highlight on mobile Safari.\n        WebkitTapHighlightColor: 'transparent',\n      },\n      default: {},\n    }),\n  },\n});\n\nexport default Overlay;\n"]}