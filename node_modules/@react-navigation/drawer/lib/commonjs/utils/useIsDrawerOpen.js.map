{"version":3,"sources":["useIsDrawerOpen.tsx"],"names":["useIsDrawerOpen","navigation","drawer","dangerouslyGetState","type","dangerouslyGetParent","isDrawerOpen","setIsDrawerOpen","React","useState","Boolean","history","find","it","useEffect","unsubscribe","addListener","e","data","state"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAGA;;;AAGe,SAASA,eAAT,GAA2B;AACxC,QAAMC,UAAU,GAAG,4BAAnB;AAEA,MAAIC,MAAM,GAAGD,UAAb,CAHwC,CAKxC;AACA;;AACA,SAAOC,MAAM,IAAIA,MAAM,CAACC,mBAAP,GAA6BC,IAA7B,KAAsC,QAAvD,EAAiE;AAC/DF,IAAAA,MAAM,GAAGA,MAAM,CAACG,oBAAP,EAAT;AACD;;AAED,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCC,KAAK,CAACC,QAAN,CAAe,MACrDP,MAAM,GACFQ,OAAO,CACLR,MAAM,CAACC,mBAAP,GAA6BQ,OAA7B,CAAqCC,IAArC,CAA0CC,EAAE,IAAIA,EAAE,CAACT,IAAH,KAAY,QAA5D,CADK,CADL,GAIF,KALkC,CAAxC;AAQAI,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGb,MAAM,CAACc,WAAP,CAAmB,OAAnB,EAA4BC,CAAC,IAAI;AACnDV,MAAAA,eAAe,CACbG,OAAO,CAACO,CAAC,CAACC,IAAF,CAAOC,KAAP,CAAaR,OAAb,CAAqBC,IAArB,CAA0BC,EAAE,IAAIA,EAAE,CAACT,IAAH,KAAY,QAA5C,CAAD,CADM,CAAf;AAGD,KAJmB,CAApB;AAMA,WAAOW,WAAP;AACD,GARD,EAQG,CAACb,MAAD,EAASI,YAAT,CARH;AAUA,SAAOA,YAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation, ParamListBase } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '../types';\n\n/**\n * Hook to detect if the drawer is open in a parent navigator.\n */\nexport default function useIsDrawerOpen() {\n  const navigation = useNavigation();\n\n  let drawer = navigation as DrawerNavigationProp<ParamListBase>;\n\n  // The screen might be inside another navigator such as stack nested in drawer\n  // We need to find the closest drawer navigator and add the listener there\n  while (drawer && drawer.dangerouslyGetState().type !== 'drawer') {\n    drawer = drawer.dangerouslyGetParent();\n  }\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(() =>\n    drawer\n      ? Boolean(\n          drawer.dangerouslyGetState().history.find(it => it.type === 'drawer')\n        )\n      : false\n  );\n\n  React.useEffect(() => {\n    const unsubscribe = drawer.addListener('state', e => {\n      setIsDrawerOpen(\n        Boolean(e.data.state.history.find(it => it.type === 'drawer'))\n      );\n    });\n\n    return unsubscribe;\n  }, [drawer, isDrawerOpen]);\n\n  return isDrawerOpen;\n}\n"]}